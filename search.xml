<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>短评《现代 C++ 白皮书》</title>
    <url>/comments/2021/12/28/develop-modern-cpp/</url>
    <content><![CDATA[<p>近几天读完了 Bjarne Stroustrup 的 HOPL4 论文 <a href="https://www.stroustrup.com/hopl20main-p5-p-bfc9cd4--final.pdf">Thriving in a Crowded and Changing World: C++ 2006–2020</a> 经由 Boolan 组织翻译的中文版，相关文本内容托管在 GitHub 上，<a href="https://github.com/cpp-club/cxx_hopl4_zh">在线阅读</a>。</p>
<p>不谈其中具体的技术细节，我从 Bjarne 反思 C++ 作为一门编程语言在几十年来如何发展，遇到的问题以及未来的方向的考虑的过程中得到了不少启发，这里做个转述和简短的评论。</p>
<span id="more"></span>

<h2 id="目标与原则"><a href="#目标与原则" class="headerlink" title="目标与原则"></a>目标与原则</h2><p>一门编程语言也好，一个开源项目也好，要想获得长久的生命力，无一不是面向真实的用户问题，形成自己的一套解决方法和原则，并长期坚持予以贯彻。C++ 的发展在 Bjarne 的眼中即是如此。</p>
<p>C++ 作为一门通用编程语言，能够纳入其所要解决的问题涵盖的范围相当广泛。甚至可以说任何需求都可以是 C++ 的需求。在这样的背景下，Bjarne 还是给出了应该避免的错误关注点，指出哪些类型的需求是可疑的。对于一个雄心勃勃的新项目来说，将所有需求都纳入自己的范畴之内无疑是极具诱惑的，但是知道自己不做什么，才是让这个项目脚踏实地真正解决问题的第一步。</p>
<p>Bjarne 总结了 C++ 发展过程当中的教训，包括了一些错误的关注点</p>
<ul>
<li>只为专家服务。某个功能从开始的时候就要满足所有专家的需要。</li>
<li>模仿。我们需要这个功能，因为它在另外某个语言里很流行。</li>
<li>理论性。语言理论里说语言一定要有这个特性。</li>
<li>革命性。此功能非常重要，以至于我们必须打破兼容性，或者摒弃那些不好的老方法。</li>
</ul>
<p>这些都是非常经典的说辞，论文里却对它们全部予以驳斥。Bjarne 观察到用户对 C++ 的要求是</p>
<ul>
<li>让语言更简单！</li>
<li>立即添加这两个必要特性！！</li>
<li>不要搞砸我的（任何）代码！！！</li>
</ul>
<p>这三者其实是相互矛盾的，语言的简化和演进会对兼容性形成挑战，新增特性和简单性之间也会有所冲突。Bjarne 由此归纳出来的发展原则是</p>
<ul>
<li>问题驱动。C++ 开发应该被那些真实世界中的具体问题的需求所驱动。</li>
<li>简单。C++ 应该从简单、高效、易用的解决方案中进行推广而成长。</li>
<li>高效。C++ 语言和标准库应该遵循零开销原则。</li>
<li>稳定性。不要搞砸我的代码！</li>
</ul>
<p>并且几乎总是站在简单性的一边。好的软件通过提供恰如其分的抽象和合理的默认行为来简化用户逻辑的表达。Bjarne 反复提及的设计理念是所谓的“洋葱原则”</p>
<blockquote>
<p>如果要完成的任务是简单的，那就用简单的方法做；当要完成的任务不是那么简单时，就需要更详细、更复杂的技巧或写法。这就好比你剥下了一层洋葱。剥得越深，流泪就越多。</p>
</blockquote>
<p>这个原则也在 Perl 语言的设计思想当中有所体现</p>
<blockquote>
<p>Easy things should be easy, and hard things should be possible.</p>
</blockquote>
<p>往上或许可以追溯到 Alan Kay 的类似观点</p>
<blockquote>
<p>Simple things should be simple, complex things should be possible.</p>
</blockquote>
<p>简单，提供足够的封装，一个软件才能够为用户带来价值。</p>
<p>除此以外，对于 C++ 语言在实现上的原则，Bjarne 贯穿全文的强调了两点</p>
<ul>
<li>语言结构到硬件设备的直接映射</li>
<li>零开销抽象<ul>
<li>你不用的东西，就不需要付出代价。</li>
<li>你使用的东西，手工写的代码也不会更好。</li>
</ul>
</li>
</ul>
<p>这也是 C++ 定位在系统编程语言带来的需求，原文的表达是“不要给 C++ 以下的低级语言留有余地（汇编语言除外）”。</p>
<h2 id="工作组织方式"><a href="#工作组织方式" class="headerlink" title="工作组织方式"></a>工作组织方式</h2><p>原文第三章《C++ 标准委员会》花了一章的篇幅讲述了几十年间推动 C++ 语言演进的组织的架构，以及它是如何发挥作用的。限于短评的篇幅这里不做展开讨论，仅罗列原文总结的 C++ 标准委员会在设计和演进语言时面临的问题，几乎每一个都一针见血。强烈建议阅读原文全文（3.3 节），Bjarne 在各个特性的讨论中间也会以该特性为例子讲述碰到的问题和解决方案。</p>
<ul>
<li>延迟</li>
<li>孤立特性</li>
<li>后来者居上</li>
<li>热情总青睐新事物</li>
<li>过度自信</li>
<li>实现时机不当</li>
<li>特性交互</li>
<li>篇幅和分心</li>
<li>精确规范</li>
<li>经院主义</li>
<li>方向</li>
<li>专一关注</li>
<li>原则的不适当应用</li>
<li>倾向专家的偏见</li>
<li>聪明的问题</li>
<li>不愿妥协</li>
<li>缺乏优先级</li>
<li>完美主义</li>
<li>少数人的阻挠</li>
<li>内聚的团体</li>
</ul>
]]></content>
      <categories>
        <category>tison</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>软件工程</tag>
        <tag>开源共同体</tag>
      </tags>
  </entry>
  <entry>
    <title>流处理系统中状态的表示和存储</title>
    <url>/comments/2022/01/15/store-of-streaming-states/</url>
    <content><![CDATA[<p>流处理系统处理的数据往往是没有边界的：数据会一直从数据源输入，用户需要看到 SQL 查询的实时结果。与此同时，流处理系统中的计算节点可能出错、失败，可能根据用户的需求实时扩容、缩容。在这一过程中，系统需要能够高效地将计算的中间状态在节点之间转移，并持久化到外部系统上，从而保证计算的不间断进行。</p>
<p>本文介绍了工业界学术界中流处理系统状态存储的三种方案：存储完整状态 (<a href="https://flink.apache.org/">Flink</a> 等系统)，存储共享状态 (以 <a href="https://github.com/MaterializeInc/materialize">Materialize</a> / <a href="https://github.com/TimelyDataflow/differential-dataflow">Differential Dataflow</a> 为例)，存储部分状态 (以 <a href="https://github.com/mit-pdos/noria">Noria (OSDI ‘18)</a> 为例)。这些存储方案各有优势，可以为未来的流处理引擎开发提供一些借鉴意义。</p>
<span id="more"></span>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>假设某个购物系统中有两个表：</p>
<ul>
<li><code>visit(product, user, length)</code> 表示用户查看某产品多少秒。</li>
<li><code>info(product, category)</code> 表示某个产品属于某个分类。</li>
</ul>
<p>现在我们要查询：某个分类下用户查看产品最长的时间是多少。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">result</span> <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> category,</span><br><span class="line">       <span class="built_in">MAX</span>(length) <span class="keyword">as</span> max_length <span class="keyword">FROM</span></span><br><span class="line">  info <span class="keyword">INNER</span> <span class="keyword">JOIN</span> visit <span class="keyword">ON</span> product</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> category</span><br></pre></td></tr></table></figure>

<p>这个查询中包含两表 Join 和一个聚合操作。后文的讨论都将基于这个查询进行。</p>
<p>假设系统现在的状态是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info(product, category)</span><br><span class="line">Apple, Fruit</span><br><span class="line">Banana, Fruit</span><br><span class="line">Carrot, Vegetable</span><br><span class="line">Potato, Vegetable</span><br><span class="line"></span><br><span class="line">visit(product, user, length)</span><br><span class="line">Apple, Alice, 10</span><br><span class="line">Apple, Bob, 20</span><br><span class="line">Carrot, Bob, 50</span><br><span class="line">Banana, Alice, 40</span><br><span class="line">Potato, Eve, 60</span><br></pre></td></tr></table></figure>

<p>此时，查询的结果应该是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">category, max_length</span><br><span class="line">Fruit, 40</span><br><span class="line">Vegetable, 60</span><br></pre></td></tr></table></figure>

<p>代表 Fruit 分类被用户查看最长的时间为 40 秒（对应 Alice 访问 Banana 的时间）；Vegetable 分类被用户查看的最长时间为 60 秒（对应 Eve 访问 Potato 的时间）。</p>
<p>在常见的数据库产品中，系统通常来说会为这个查询生成如下的执行计划（不考虑 optimizer）：</p>
<p><img src="base-system.png" alt="base plan of the query"></p>
<p>流处理系统的执行计划和常见数据库系统的计划没有太多区别。下面将具体介绍各种流处理系统会如何表示和存储计算的中间状态。</p>
<h2 id="Full-State-算子维护自己的完整状态"><a href="#Full-State-算子维护自己的完整状态" class="headerlink" title="Full State - 算子维护自己的完整状态"></a>Full State - 算子维护自己的完整状态</h2><p>诸如 <a href="https://flink.apache.org/">Flink</a> 的流处理系统持久化每个算子的完整状态；与此同时，流计算图上，算子之间传递数据的更新信息。这种存储状态的方法非常符合直觉。前文所述的 SQL，在 Flink 等系统中大致会创建出这个计算图：</p>
<p><img src="flink-operators.png" alt="plan of Flink"></p>
<p>数据源会发出增加一行或是减少一行的消息。经过流算子的处理，这些消息会转变为用户需要的结果。</p>
<h3 id="Join-State-的存储"><a href="#Join-State-的存储" class="headerlink" title="Join State 的存储"></a>Join State 的存储</h3><p>数据源的消息进入系统后，碰到的第一个算子就是 Join。回顾 SQL 查询的 Join 条件: <code>info INNER JOIN visit ON product</code>。Join 算子在收到左侧 <code>info</code> 的消息后，会先将 <code>visit</code> 一侧的 <code>product</code> 相同的行查出来，然后发给下游。之后，将 <code>info</code> 一侧的消息记录在自己的状态中。对于右侧消息的处理也如出一辙。</p>
<p>比如，现在 <code>visit</code> 一侧收到 Eve 对着 Potato 看了 60 秒 <code>+ Potato Eve 60</code> 的消息。假设此时 <code>info</code> 一侧的状态已经有了四条记录。</p>
<p><img src="flink-state-join.png" alt="join state of Flink"></p>
<p>Join 算子会查询 <code>info</code> 一侧 <code>product = Potato</code> 的记录，得到 Potato 是 Vegetable 的结果，之后将 <code>Potato, Vegetable, 60</code> 发给下游。</p>
<p>而后，<code>visit</code> 一侧的状态会加入 <code>Potato -&gt; Eve, 60</code> 的记录，这样一来，如果 <code>info</code> 发生变化，Join 算子也能对应 <code>visit</code> 给下游发送 Join 算子的更新。</p>
<h3 id="Aggregation-State-的存储"><a href="#Aggregation-State-的存储" class="headerlink" title="Aggregation State 的存储"></a>Aggregation State 的存储</h3><p>消息接下来被传递到了 Agg 算子上，Agg 算子需要根据 category 分组，计算每个 category 中 length 的最大值。</p>
<p>一些简单的 Agg 状态 (比如 sum) 只需要记录每一个 group 当前的值就行了。上游发来 insert，就将 sum 加上对应的值；上游发来 delete，就将 sum 减去对应的值。所以，诸如 sum、不带 distinct 的 count 等聚合表达式需要记录的状态非常小。</p>
<p>但对于 max 状态来说，我们就不能只记录最大的那个值了。如果上游发来了一条 delete 消息，max 状态需要把第二大的值作为新的最大值发给下游。如果只记录最大值，删掉最大值以后就没法知道第二大的值是多少。因此，Agg 算子需要存储一个 group 对应的完整数据。比如在我们的例子里，AggMaxState 现在存的数据有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fruit -&gt; &#123; 10, 20, 30, 40 &#125;</span><br><span class="line">Vegetable -&gt; &#123; 50 &#125;</span><br></pre></td></tr></table></figure>

<p>上游 Join 算子发来一条插入 <code>Potato, Vegetable, 60</code> 的消息，Agg 算子会更新自己的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fruit -&gt; &#123; 10, 20, 30, 40 &#125;</span><br><span class="line">Vegetable -&gt; &#123; 50, [60] &#125;</span><br></pre></td></tr></table></figure>

<p>并把 Vegetable 这一组的更新发给下游。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE Vegetable, 50</span><br><span class="line">INSERT Vegetable, 60</span><br></pre></td></tr></table></figure>

<p>整个过程如下图所示：</p>
<p><img src="flink-state-agg.png" alt="aggregation state of Flink"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>存储完整状态的流系统通常来说有这么几个特点：</p>
<ul>
<li>流计算图上单向传递数据变更的消息 (添加/删除)。</li>
<li>流算子维护、访问自己的状态；与此同时，在多路 Join 的时候，存储的状态可能重复。后文在介绍共享状态时也会详细介绍这一点。</li>
</ul>
<h2 id="Shared-State-算子之间共享状态"><a href="#Shared-State-算子之间共享状态" class="headerlink" title="Shared State - 算子之间共享状态"></a>Shared State - 算子之间共享状态</h2><p>我们以 <a href="https://github.com/TimelyDataflow/differential-dataflow">Differential Dataflow</a> (<a href="https://github.com/MaterializeInc/materialize">Materialize</a> 下面的计算引擎) 的 Shared Arrangement 为例介绍这种共享状态的实现。下文将使用 DD 简称 Differential Dataflow。</p>
<h3 id="DD-的-Arrange-算子与-Arrangement"><a href="#DD-的-Arrange-算子与-Arrangement" class="headerlink" title="DD 的 Arrange 算子与 Arrangement"></a>DD 的 Arrange 算子与 Arrangement</h3><p><img src="shared-arrangement.png" alt="intro of shared arrangement"></p>
<p>DD 使用 Arrangement 来维护状态。简单来说，Arrangement 是一个支持 MVCC 的 key-value map 数据结构，存储 key 到 (value, time, diff) 的映射。在 Arrangement 上可以：</p>
<ul>
<li>通过 handler 任意查询某个时间点 key-value 的映射关系。</li>
<li>查询某一个 key 在一段时间内的变更情况。</li>
<li>指定查询的水位，后台合并或删除不再使用的历史数据。</li>
</ul>
<p>DD 中大部分算子都是没有状态的，所有的状态都存储在 Arrangement 里。Arrangement 可以使用 Arrange 算子生成，也可以由算子 (比如 Reduce 算子) 自己维护。在 DD 的计算图上，有两种消息传递：</p>
<ul>
<li>数据在某一时刻的变更 <code>(data, time, diff)</code>。这种数据流叫做 Collection。</li>
<li>数据的快照，也就是 Arrangement 的 handler。这种数据流叫做 Arranged。</li>
</ul>
<p>DD 中每个算子的对自己的输入输出也有一定的要求，比如下面几个例子：</p>
<ul>
<li>Map 算子（对应 SQL 的 Projection）输入 Collection 输出 Collection。</li>
<li>JoinCore 算子 (Join 的一个阶段) 输入 Arranged 输出 Collection。</li>
<li>ReduceCore 算子 (Agg 的一个阶段) 输入 Arranged 输出 Arranged。</li>
</ul>
<p>之后我们会详细介绍 DD 中的 JoinCore 和 ReduceCore 算子。</p>
<h3 id="从-Differential-Dataflow-到-Materialize"><a href="#从-Differential-Dataflow-到-Materialize" class="headerlink" title="从 Differential Dataflow 到 Materialize"></a>从 Differential Dataflow 到 Materialize</h3><p>Materialize 会将用户输入的 SQL 查询转换为 DD 的计算图。值得一提的是，<code>join</code>, <code>group by</code> 等 SQL 操作在 DD 中往往不会只对应一个算子。我们顺着消息的流动，看看 Materialize 是如何存储状态的。</p>
<p><img src="dd-operators.png" alt="plan of differential dataflow"></p>
<h3 id="Join-State-的存储-1"><a href="#Join-State-的存储-1" class="headerlink" title="Join State 的存储"></a>Join State 的存储</h3><p>SQL 的 A Join B 操作在 DD 中对应三个算子：两个 <code>Arrange</code> 和一个 <code>JoinCore</code>。Arrange 算子根据 join key 分别持久化状态两个 source 的状态，以 KV 的形式存储在 Arrangement 中。Arrange 算子对输入攒批后，将 TraceHandle 发给下游的 <code>JoinCore</code> 算子。实际的 Join 逻辑在 <code>JoinCore</code> 算子中发生，<code>JoinCore</code> 不存储任何状态。</p>
<p><img src="dd-state-join.png" alt="join state of differential dataflow"></p>
<p>如上图所示，现在 Visit 侧来了一条更新：Eve 对着 Potato 看了 60 秒。<code>JoinCore</code> 算子通过 Trace B 访问到这条更新，并向另一侧的 Trace A 查询 <code>product = Potato</code> 的行，匹配到 <code>Potato</code> 是一种蔬菜，往下游输出 <code>Potato, Vegetable, 60</code> 的更改。</p>
<h3 id="Reduce-状态的存储"><a href="#Reduce-状态的存储" class="headerlink" title="Reduce 状态的存储"></a>Reduce 状态的存储</h3><p>DD 中 SQL Agg 算子对应 Reduce 操作。Reduce 中又包含两个算子：<code>Arrange</code> 和 <code>ReduceCore</code>。<code>Arrange</code> 算子根据 group key 存储输入数据，<code>ReduceCore</code> 算子自己维护一个存储聚合结果的 Arrangement，而后通过 <code>as_collection</code> 操作将聚合结果输出成一个 collection。</p>
<p><img src="dd-state-agg.png" alt="aggregation state of differential dataflow"></p>
<p>Join 的更新来到 Reduce 算子后，先被 Arrange 算子根据 group key 存储在 Arrangement 中。ReduceCore 收到 Trace C 后，将 <code>key = Vegetable</code> 的行全部扫描出来，并求最大值，最后将最大值更新到自己的 Arrangement 中。Trace D 经过 <code>as_collection</code> 操作后，即可输出为数据更新的形式，变成其他算子可以处理的信息。</p>
<h3 id="更方便的算子状态复用"><a href="#更方便的算子状态复用" class="headerlink" title="更方便的算子状态复用"></a>更方便的算子状态复用</h3><p>由于 DD 中存储状态的算子和实际计算的算子是分开的，我们可以利用这个性质做算子状态的复用。</p>
<p><img src="dd-join-3-way.png" alt="3-way join of differential dataflow"></p>
<p>比如用户想要同时查询 <code>A JOIN B</code> 和 <code>B JOIN C</code>，在 DD 中，一种可能的计算图就是生成三个 Arrange 算子和两个 JoinCore 算子。相比于存储完整状态的流处理系统，我们可以避免 B 的状态被存两遍</p>
<p>另一个例子是多路 Join，比如 <code>SELECT * FROM A, B, C WHERE A.x = B.x and A.x = C.x</code>。在这个例子中，如果使用 JoinCore 算子来生成计算图，状态还是有可能重复，一共需要生成 4 个 Arrangement。</p>
<p>Materialize 的 SQL Join 除了被转换为上文所述 DD 的 JoinCore 算子之外，也有可能转换为 Delta Join。如图所示，我们只需要分别生成 A, B, C 的 3 个 Arrangement，然后使用 lookup 算子查询 A 的修改在 B C 中对应的行（其他两个表的修改亦然），最后做一个 union，即可得到 Join 的结果。Delta Join 可以充分利用已有的 Arrangement 进行计算，大大减小 Join 所需的状态存储数。</p>
<h3 id="远程访问状态的开销"><a href="#远程访问状态的开销" class="headerlink" title="远程访问状态的开销"></a>远程访问状态的开销</h3><p>在流系统中，计算中间产生的数据往往无法全部放在一个结点上；与此同时，同一个执行计划中的节点，也会有很多并行度。比如下面这个两表 Join 的例子。两个表 A、B 的 Arrangement 可能分别在两个结点上产生 (Node 1, 2)，然后同时用两个结点分别对其中一部分数据做 Join。</p>
<p><img src="dd-remote-shuffle.png" alt="remote shuffle of differential dataflow"></p>
<p>在这个情况下，DD 中势必会发生远程访问 Arrangement 的问题。由于算子完全没有内部状态，JoinCore 每处理一行都需要一次远程访问，查找 join key 对应的数据。总的来说，Arrange 和计算放在两个结点上会大大增加计算的延迟，放在一个结点上又无法充分利用分布式系统的资源，这是一个比较矛盾的地方。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在共享状态的流处理系统中，算子的计算逻辑和存储逻辑被拆分到多个算子中。因此，不同的计算任务可以共享同一个存储，从而减少存储状态的数量。如果要实现共享状态的流处理系统，一般会有这样的特点：</p>
<ul>
<li>流计算图上传递的不仅仅是数据的变更，可能还会包括状态的共享信息（比如 DD 的 Trace Handle）。</li>
<li>流算子访问状态会有一定的开销；但相对而言存储完整状态的流计算系统而言，整个流计算过程中由于状态复用，存储的状态数量更小。</li>
</ul>
<h2 id="Partial-State-算子只存储部分信息"><a href="#Partial-State-算子只存储部分信息" class="headerlink" title="Partial State - 算子只存储部分信息"></a>Partial State - 算子只存储部分信息</h2><p>在 <a href="https://github.com/mit-pdos/noria">Noria (OSDI ‘18)</a> 这一系统中，计算不会在数据源更新信息时触发，流处理算子并不会保存完整的信息。</p>
<p>比如，如果用户在之前创建的视图上执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM result WHERE category = &quot;Vegetable&quot;</span><br></pre></td></tr></table></figure>

<p>执行这条 SQL 的时候，才会触发流系统的计算。计算过程中，也只计算 <code>category = &quot;Vegetable&quot;</code> 相关的数据，保存相关的状态。下面将以这条查询为例，说明 Noria 的计算方式与状态存储。</p>
<h3 id="Upquery"><a href="#Upquery" class="headerlink" title="Upquery"></a>Upquery</h3><p>Noria 的各个算子仅存储部分数据。用户的查询可能直接击中这个部分状态的缓存，也有可能需要回溯到上游查询。假设现在所有算子的状态都为空，Noria 需要通过 upquery 来递归查询上游算子的状态，从而得到正确的结果。</p>
<p><img src="noria-upquery.png" alt="upquery of Noria"></p>
<p>用户向流计算引擎查询 <code>category = &quot;Vegetable&quot;</code> 的最大值。Agg 算子为了计算出它的结果，需要知道所有 category 为蔬菜的记录。于是，Agg 算子将这个 upquery 转发到上游 Join 算子。</p>
<p>Join 算子要得到蔬菜对应的所有信息，需要向两个上游表分别查询情况。category 属于 Info 表的列，因此，Join 算子将这条 upquery 转发给 Info 表。</p>
<h3 id="Join-算子的实现"><a href="#Join-算子的实现" class="headerlink" title="Join 算子的实现"></a>Join 算子的实现</h3><p><img src="noria-join-left.png" alt="join implementation of Noria - the left side"></p>
<p>Info table 返回蔬菜分类下的所有产品后，Join 算子会再发一个 upquery 给另一边 Visit table，查询萝卜、土豆对应的浏览记录。</p>
<p><img src="noria-join-right.png" alt="join implementation of Noria - the right side"></p>
<p>Visit table 返回对应记录后，Join 算子就可以根据两次 Upquery 的输出计算出 Join 结果了。</p>
<p>在 Noria 中，Join 算子无需保存任何实际状态，仅需要记录正在进行的 upquery 即可。</p>
<h3 id="Agg-算子的实现"><a href="#Agg-算子的实现" class="headerlink" title="Agg 算子的实现"></a>Agg 算子的实现</h3><p><img src="noria-agg.png" alt="aggregation implementation of Noria"></p>
<p>数据来到 Agg 算子后，Noria 将直接计算出最大值，并将最大值存储在算子的状态中。在前文所述的系统里，Agg 算子的状态需要保存完整的数据（水果的所有浏览记录、蔬菜的所有浏览记录）。Noria 只需要缓存用户请求的状态，因此在这个请求中只要记录蔬菜的记录。与此同时，如果上游发生了删除操作，Noria 可以直接将蔬菜对应的行删除，以便之后重新计算最大值。因此，在存储部分状态的系统中，也无需通过记录所有值的方法回推第二大的值——直接清空缓存就行了。</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>存储部分状态的流处理系统通过 upquery 的方式实时响应用户的请求，在本文所述的实现中，所需要存储的状态数最少。它一般有以下特点：</p>
<ul>
<li>计算图的数据流向是双向的——既可以从上游到下游输出数据，也可以从下游到上游发 upquery。</li>
<li>由于需要递归 upquery，计算的延迟可能比其他状态存储方式略微大一点。</li>
<li>数据一致性比较难实现。本文所述的其他存储方法都可以比较简单地实现最终一致；但对于存储部分状态的系统来说，需要比较小心地处理更新和 upquery 返回结果同时在流上传递的问题，对于每个算子都要仔细证明实现的正确性。</li>
<li>DDL / Recovery 非常快。由于算子里面的信息都是按需计算的，如果用户对 View 进行增删列的操作，或是做迁移，都可以直接清空缓存分配新节点，无需代价较高的状态恢复。</li>
</ul>
<p>最后对比一下所有的状态存储方式所对应的流处理系统特征：</p>
<p><img src="state-compare.png" alt="comparison of streaming state stores"></p>
<ul>
<li>存储完整状态 (以 Flink 为例)：流上传递数据。</li>
<li>共享状态存储 (以 Materialize / DD 为例)：流上传递数据和 snapshot。</li>
<li>存储部分状态 (以 Noria 为例)：流上传递数据，流上双向都有消息。</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://flink.apache.org/">Apache Flink</a></li>
<li><a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/dev/table/sql/gettingstarted/">Flink SQL</a></li>
<li><a href="https://github.com/MaterializeInc/materialize">Materialize</a></li>
<li><a href="https://materialize.com/joins-in-materialize/">Joins in Materialize</a></li>
<li><a href="https://materialize.com/maintaining-joins-using-few-resources/">Maintaining Joins using Few Resources</a></li>
<li><a href="https://github.com/TimelyDataflow/differential-dataflow">differential-dataflow</a></li>
<li><a href="https://github.com/mit-pdos/noria">Noria</a></li>
</ul>
<p>写这篇文章时，我也大量阅读了 Materialize, Differential Dataflow 和 Noria 的源代码。如果有具体实现上的问题，也欢迎交流。</p>
]]></content>
      <categories>
        <category>skyzh</category>
      </categories>
      <tags>
        <tag>流计算</tag>
        <tag>存储系统</tag>
      </tags>
  </entry>
</search>
